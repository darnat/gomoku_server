#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <errno.h>
#include "struct_play.h"
#include "struct_server.h"
#include "server.h"

void		set_clients(t_server *server, fd_set *readfs)
{
  t_play	*plays;

  plays = server->plays;
  FD_ZERO(readfs);
  FD_SET(server->fd_server, readfs);
  while (plays)
    {
      FD_SET(plays->fd_player_1, readfs);
      FD_SET(plays->fd_player_2, readfs);
      plays = plays->next;
    }
}

int		max_client_fd(t_server *server)
{
  int		max;
  t_play	*plays;

  max = -1;
  plays = server->plays;
  while (plays)
    {
      if (plays->fd_player_1 > max)
	max = plays->fd_player_1;
      if (plays->fd_player_2 > max)
	max = plays->fd_player_2;
      plays = plays->next;
    }
  if (server->fd_server > max)
    max = server->fd_server;
  return (max);
}

int		handle_clients(t_server *server, fd_set *readfs)
{
  set_clients(server, readfs);
  if (select(max_client_fd(server) + 1, readfs, NULL, NULL, NULL) == -1)
    {
      fprintf(stderr, "Error : select : %s\n", strerror(errno));
      close_all_sockets(server);
      return (1);
    }
  if (FD_ISSET(server->fd_server, readfs))
    if (accept_client(server))
      return (1);
}

void		close_all_sockets(t_server *server)
{
  t_play	*plays;

  plays = server->plays;
  if (close(server->fd_server) == -1)
    fprintf(stderr, "Error : close : %s\n", strerror(errno));    
  while (plays)
    {
      if (close(plays->fd_player_1) == -1)
	fprintf(stderr, "Error : close : %s\n", strerror(errno));
      if (close(plays->fd_player_2) == -1)
	fprintf(stderr, "Error : close : %s\n", strerror(errno));
      plays = plays->next;
    }
}

int			accept_client(t_server *server)
{
  struct sockaddr_in	s_in;
  socklen_t		s_size;
  int			v;
  t_play		*new;
  t_play		*tmp;

  s_size = sizeof(s_in);
  if ((new = malloc(sizeof(t_play))) == NULL)
    {
      fprintf(stderr, "Error : malloc failed\n");
      if (close(server->fd_server) == -1)
	fprintf(stderr, "Error : close : %s\n", strerror(errno));
      return (1);
    }
  if ((new->fd_player_1 = accept(server->fd_server, (struct sockaddr *)(&s_in), &s_size)) == -1)
    {
      fprintf(stderr, "Error : accept : %s\n", strerror(errno));
      if (close(server->fd_server) == -1)
	fprintf(stderr, "Error : close : %s\n", strerror(errno));
      return (1);
    }
  new->fd_player_2 = -1;
  new->player_number = 1;
  printf("New connection %s\n", inet_ntoa(s_in.sin_addr));
  tmp = server->plays;
  tmp = tmp->next;
  server->plays = tmp;
  return (0);
}

int		launch_server(t_server *server)
{
  fd_set	readfs;

  while (server->is_running)
    {
      if (handle_clients(server, &readfs))
	return (1);
    }
  close_all_sockets(server);
  return (0);
}
